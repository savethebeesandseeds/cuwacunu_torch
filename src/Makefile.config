# =============================================================================
# Makefile.config — project-wide build configuration & reusable rules (TESTS)
#
# This file is included by test Makefiles under /tests/bench/... only.
# It provides:
#   • toolchain flags, include paths, linker libs
#   • reliable .d dependency tracking
#   • tiny leaf Makefiles (use TEST_ONEFILE)
#   • per-module static archives (reused by tests)
#   • a dispatcher helper that builds first, then runs
# =============================================================================


# -----------------------------------------------------------------------------
# 0) Toolchain & Core Flags
# -----------------------------------------------------------------------------
CXX          := g++
CXX_STANDARD := c++20

COMMON_WARN  := -Wall -Wno-unused-function
DEBUG_FLAGS  := -g -Og -fno-omit-frame-pointer -rdynamic

# Compile-time hardening (objects)
SEC_CFLAGS   := -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIC
# Link-time hardening (executables)
SEC_LDFLAGS  := -pie -fPIE

CXXFLAGS     += -std=$(CXX_STANDARD) $(COMMON_WARN) $(DEBUG_FLAGS) $(SEC_CFLAGS)
LDFLAGS      += $(SEC_LDFLAGS)


# -----------------------------------------------------------------------------
# 0.1) SHOW_CMD toggle
#   SHOW_CMD=1 (yes/true/on) → show raw commands
#   SHOW_CMD=0 (default)     → quiet (pretty logs only)
# -----------------------------------------------------------------------------
SHOW_CMD ?= 0
SHOW_CMD_ON := $(filter 1 yes true on,$(strip $(SHOW_CMD)))

# Q is a prefix for *every* command line in recipes:
#   • empty when verbose (SHOW_CMD=1)  → print commands
#   • '@' when quiet                   → hide commands
Q := $(if $(SHOW_CMD_ON),,@)

# Keep make tidy; add -s only in quiet mode
ifeq ($(SHOW_CMD_ON),)
  MAKEFLAGS += --no-builtin-rules --no-print-directory -s
else
  MAKEFLAGS += --no-builtin-rules --no-print-directory
endif

# Propagate the toggle to any sub-makes (important for the dispatcher)
MAKEFLAGS += SHOW_CMD=$(SHOW_CMD)


# -----------------------------------------------------------------------------
# 1) Project Layout
# -----------------------------------------------------------------------------
OUTPUT_PATH := $(ROOT_PATH)/build
IMPL_PATH   := $(ROOT_PATH)/impl
CONFIG_PATH := $(ROOT_PATH)/config
TESTS_PATH  := $(ROOT_PATH)/tests

# No trailing slash (avoids // in paths) — use an absolute path so -C submakes agree
TESTS_PATH_ABS := $(abspath $(TESTS_PATH))
TEST_OUT       := $(patsubst %/,%,$(TESTS_PATH_ABS)/build)


# -----------------------------------------------------------------------------
# 2) External SDK Locations
# -----------------------------------------------------------------------------
EXTERNAL_LIBS_PATH := /cuwacunu/external
LIBTORCH_PATH      := $(EXTERNAL_LIBS_PATH)/libtorch
LIBCUDA_PATH       := /usr/local/cuda-12.1
SSL_PATH           := /usr
LIBCURL_PATH       := /usr


# -----------------------------------------------------------------------------
# 3) Include Paths
# -----------------------------------------------------------------------------
USUAL_INCLUDE_PATHS   := -I$(ROOT_PATH)/ -I$(ROOT_PATH)/include -I$(ROOT_PATH)/include/torch_compat
TORCH_INCLUDE_PATHS   := -I$(LIBTORCH_PATH)/include -I$(LIBTORCH_PATH)/include/torch/csrc/api/include -I$(LIBCUDA_PATH)/include
SSL_INCLUDE_PATHS     := -I$(SSL_PATH)/include
LIBCURL_INCLUDE_PATHS := -I$(LIBCURL_PATH)/include
NCURSES_INCLUDE_PATHS := -I/usr/include/ncursesw


# -----------------------------------------------------------------------------
# 4) Link Libraries (system libs)
# -----------------------------------------------------------------------------
LDLIBS_common := -lstdc++ -lpthread -lm

LDLIBS_torch := -L$(LIBTORCH_PATH)/lib -L$(LIBCUDA_PATH)/lib64
LDLIBS_torch += -Wl,-rpath,$(LIBTORCH_PATH)/lib
LDLIBS_torch += -Wl,-rpath,$(LIBCUDA_PATH)/lib64
LDLIBS_torch += -ltorch_cuda -lc10_cuda -ltorch_cpu -ltorch -lcudnn -lc10
LDLIBS_torch += -lcuda -lcudart -lnvToolsExt

LDLIBS_ssl  := -L$(SSL_PATH)/lib/x86_64-linux-gnu/ -lcrypto -lssl
LDLIBS_curl := -lcurl

# Keep original naming for ncurses compatibility across the tests tree
LDLIBS_ncurses  := -lncursesw


# -----------------------------------------------------------------------------
# 5) Dependency (.d) Files
# -----------------------------------------------------------------------------
DEPDIR := $(OUTPUT_PATH)/.deps
OBJTMP := $(OUTPUT_PATH)/.objs

# Object rules (CC_RULE) write depfiles alongside $(OUTPUT_PATH) tree
DEPFILE  = $(DEPDIR)/$(@:$(OUTPUT_PATH)/%=%:.o=.d)
DEPFLAGS = -MMD -MP -MF $(DEPFILE) -MT $@

# Include all known depfiles (safe if none exist yet)
-include $(shell test -d $(DEPDIR) && find $(DEPDIR) -name '*.d' -print)


# -----------------------------------------------------------------------------
# 6) Logging (with runtime SHA-256)
# -----------------------------------------------------------------------------
COLOR_GREEN      := \033[32m
COLOR_DIM_GREEN  := \033[2;32m
COLOR_YELLOW     := \033[33m
COLOR_DIM_YELLOW := \033[2;33m
COLOR_RED        := \033[31m
COLOR_GRAY       := \033[90m
COLOR_RESET      := \033[0m

LOG_START = { \
  printf "$(COLOR_DIM_YELLOW)[$(COLOR_GRAY)OBJ:$(COLOR_DIM_YELLOW)BUILD]$(COLOR_RESET)  \
$(COLOR_GRAY)%-70s request to build.$(COLOR_RESET)\n" "$(notdir $@)"; \
}

LOG_END = { \
  sha="$$(sha256sum '$@' 2>/dev/null | awk '{print $$1}')"; \
  md5="$$(md5sum    '$@' 2>/dev/null | awk '{print $$1}')"; \
  printf "$(COLOR_DIM_YELLOW)[$(COLOR_GRAY)OBJ:$(COLOR_DIM_GREEN)   OK$(COLOR_DIM_YELLOW)]$(COLOR_RESET)  \
$(COLOR_GRAY)%-70s $(COLOR_GRAY)[$(COLOR_DIM_YELLOW)sha256:$(COLOR_GRAY)%s][$(COLOR_DIM_YELLOW)md5:$(COLOR_GRAY)%s]$(COLOR_RESET)\n" "$(notdir $@)" "$$sha" "$$md5"; \
} || printf "$(COLOR_DIM_YELLOW)    [OBJ:$(COLOR_RED)FAIL$(COLOR_DIM_YELLOW) ]$(COLOR_RESET)  %-20s (exit %s)\n" \
       "$(notdir $@)" "$$?"

# Remove stale output before re-creating (defends against stray files)
LOCAL_CLEAN = { [ -f $@ ] && shred -u $@ || true; }

# Optional run modes (tests may override RUN_MODE)
PLAIN     :=
GDB       := gdb -ex "set print thread-events off" -ex run
GDB_TORCH := CUDA_LAUNCH_BLOCKING=1 TORCH_SHOW_CPP_STACKTRACES=1 $(GDB)
VALGRIND  := valgrind --leak-check=full -s --show-leak-kinds=all \
               --suppressions=$(CONFIG_PATH)/valgrind.supp \
               --gen-suppressions=all \
               --log-file=$(ROOT_PATH)/src/valgrind.log
RUN_MODE  = $(PLAIN)


# -----------------------------------------------------------------------------
# 7) Central Build Rules (split lines so g++ shows clearly)
# -----------------------------------------------------------------------------
define CC_RULE
	$(Q)mkdir -p $(@D) $(DEPDIR) $(dir $(DEPFILE))
	$(Q)$(LOG_START)
	$(Q)$(LOCAL_CLEAN)
	$(Q)$(CXX) $(CXXFLAGS) $(DEPFLAGS) \
	      $(USUAL_INCLUDE_PATHS) $(INCLUDES_EXTRA) \
	      -c $< -o $@
	$(Q)$(LOG_END)
endef

define ONEFILE_EXE_RULE
	$(Q)mkdir -p $(@D) $(DEPDIR) $(dir $(DEPFILE))
	$(Q)$(LOG_START)
	$(Q)$(LOCAL_CLEAN)
	$(Q)$(CXX) $(CXXFLAGS) $(DEPFLAGS) \
	      $(USUAL_INCLUDE_PATHS) $(INCLUDES_EXTRA) \
	      -c $< -o $(OBJTMP)/$(basename $(notdir $@)).o
	$(Q)$(CXX) $(LDFLAGS) \
	      $(OBJTMP)/$(basename $(notdir $@)).o \
	      $(LDLIBS_common) $(LDLIBS_EXTRA) -o $@
	$(Q)$(LOG_END)
endef

define LINK_RULE
	$(Q)$(CXX) $(LDFLAGS) $^ $(LDLIBS_common) $(LDLIBS_EXTRA) -o $@
endef


# -----------------------------------------------------------------------------
# 8) Per-Module Static Archives (built once, reused everywhere)
# -----------------------------------------------------------------------------
libcommon_a := $(OUTPUT_PATH)/libcommon.a
libcurl_a   := $(OUTPUT_PATH)/libcurlwrap.a
libssl_a    := $(OUTPUT_PATH)/libsslwrap.a
libtorch_a  := $(OUTPUT_PATH)/libtorchwrap.a

.SECONDEXPANSION:

$(libcommon_a):  $$(wildcard $(OUTPUT_PATH)/common/*.o)
	$(Q)mkdir -p $(@D)
	$(Q)rm -f $@
	$(Q)objs="$^"; if [ -n "$$objs" ]; then ar rcs $@ $$objs; else : > $@; fi

$(libcurl_a):    $$(wildcard $(OUTPUT_PATH)/libcurl/*.o)
	$(Q)mkdir -p $(@D)
	$(Q)rm -f $@
	$(Q)objs="$^"; if [ -n "$$objs" ]; then ar rcs $@ $$objs; else : > $@; fi

$(libssl_a):     $$(wildcard $(OUTPUT_PATH)/openssl/*.o)
	$(Q)mkdir -p $(@D)
	$(Q)rm -f $@
	$(Q)objs="$^"; if [ -n "$$objs" ]; then ar rcs $@ $$objs; else : > $@; fi

$(libtorch_a):   $$(wildcard $(OUTPUT_PATH)/libtorch/*.o)
	$(Q)mkdir -p $(@D)
	$(Q)rm -f $@
	$(Q)objs="$^"; if [ -n "$$objs" ]; then ar rcs $@ $$objs; else : > $@; fi

.PHONY: lib-bundles
lib-bundles: $(libcommon_a) $(libcurl_a) $(libssl_a) $(libtorch_a)
	$(Q)printf "$(COLOR_DIM_YELLOW)[$(COLOR_GRAY)MODULE:$(COLOR_DIM_GREEN)OK$(COLOR_DIM_YELLOW)]$(COLOR_RESET)  $(COLOR_GREEN)%s$(COLOR_RESET)\n" "$(@)"


# -----------------------------------------------------------------------------
# 9) Sugar Macros for Source Makefiles (producers)
# -----------------------------------------------------------------------------
define BUILD_OBJ
$$(OUTPUT_PATH)/$$(strip $(1))/$$(strip $(2)).o: $$(HERE_PATH)/$$(strip $(2)).cpp
	$$(CC_RULE)

.PHONY: $$(strip $(3))
$$(strip $(3)): $$(OUTPUT_PATH)/$$(strip $(1))/$$(strip $(2)).o
	$$(Q)printf "$(COLOR_DIM_YELLOW)[$(COLOR_GRAY)MODULE:$(COLOR_DIM_GREEN)OK$(COLOR_DIM_YELLOW)]$(COLOR_RESET)  $(COLOR_GREEN)%s/$(notdir $$@)$(COLOR_RESET)\n" "$(REL_MODULE)"
endef

define BUILD_OBJ_INC
$$(OUTPUT_PATH)/$$(strip $(1))/$$(strip $(2)).o: INCLUDES_EXTRA := $$(strip $(4))
$$(eval $$(call BUILD_OBJ,$$(strip $(1)),$$(strip $(2)),$$(strip $(3))))
endef


# -----------------------------------------------------------------------------
# 10) Test Helpers (one-file tests + dispatcher)
#    TEST_ONEFILE writes libs directly on the link line (no target vars).
# -----------------------------------------------------------------------------
TEST_DEFAULT_LDLIBS ?= $(libcommon_a)

# TEST_ONEFILE
#   $(1) = binary name (e.g. test_expected_value)
#   $(2) = source cpp (relative to HERE_PATH)
#   $(3) = libs/flags to link (may include .a, -L, -l, -Wl, commas)
define TEST_ONEFILE
$(1)_DEPS := $(filter %.a,$(TEST_DEFAULT_LDLIBS) $(3))

$$(TEST_OUT)/$$(strip $(1)): $$(HERE_PATH)/$$(strip $(2)) $$($(1)_DEPS)
	$(Q)mkdir -p $$(@D) $$(DEPDIR) $$(OBJTMP)
	$(Q)$$(LOG_START)
	$(Q)$$(LOCAL_CLEAN)
	$(Q)$$(CXX) $$(CXXFLAGS) \
	      -MMD -MP -MF $$(DEPDIR)/$$(basename $$(notdir $$@)).d -MT $$@ \
	      $$(USUAL_INCLUDE_PATHS) $$(INCLUDES_EXTRA) \
	      -c $$< -o $$(OBJTMP)/$$(basename $$(notdir $$@)).o
	$(Q)$$(CXX) $$(LDFLAGS) \
	      $$(OBJTMP)/$$(basename $$(notdir $$@)).o \
	      $$(LDLIBS_common) $$(TEST_DEFAULT_LDLIBS) $(3) $$(LDLIBS_EXTRA) \
	      -o $$@
	$(Q)$$(LOG_END)

.PHONY: run-$$(strip $(1))
run-$$(strip $(1)): $$(TEST_OUT)/$$(strip $(1))
	$(Q)$$(RUN_MODE) $$(TEST_OUT)/$$(strip $(1))
endef


# -----------------------------------------------------------------------------
# 11) Dispatcher (build-first, then run)
#   Running `make -C tests test_<name> SHOW_CMD=1` will now show g++ commands
#   whenever the test needs to be rebuilt, because we force a build step first.
# -----------------------------------------------------------------------------
define FORWARD_ONE
.PHONY: test_$(1)
test_$(1):
	$(Q)echo "$(COLOR_GRAY)[DISPATCH_TEST]$(COLOR_RESET) $(2)/$(1)"
	# If SHOW_CMD=1, force the recipe to run by removing the binary first.
	$(Q)$(if $(SHOW_CMD_ON),rm -f '$(TEST_OUT)/test_$(1)'; true)
	# Build first (shows compile/link if anything is stale)
	$(Q)+{ \
	  $(MAKE) -C $(2) $(TEST_OUT)/test_$(1) || \
	  $(MAKE) -C $(2) test_$(1); \
	}
	# Then run (kept separate to avoid hiding build commands)
	$(Q)+$(MAKE) -C $(2) run-test_$(1)
endef
